#libdefine COLORCODE 28

#define ACSUTILS_ISALNUM 1<<0
#define ACSUTILS_ISALPHA 1<<1
#define ACSUTILS_ISBLANK 1<<2
#define ACSUTILS_ISCNTRL 1<<3
#define ACSUTILS_ISDIGIT 1<<4
#define ACSUTILS_ISGRAPH 1<<5
#define ACSUTILS_ISLOWER 1<<6
#define ACSUTILS_ISPRINT 1<<7
#define ACSUTILS_ISPUNCT 1<<8
#define ACSUTILS_ISSPACE 1<<9
#define ACSUTILS_ISUPPER 1<<10
#define ACSUTILS_ISXDIGIT 1<<11


int ACSUtils_AsciiTypes[128] =
{
	8,
	8,
	8,
	8,
	8,
	8,
	8,
	8,
	8,
	524,
	520,
	520,
	520,
	520,
	8,
	8,
	8,
	8,
	8,
	8,
	8,
	8,
	8,
	8,
	8,
	8,
	8,
	8,
	8,
	8,
	8,
	8,
	644,
	416,
	416,
	416,
	416,
	416,
	416,
	416,
	416,
	416,
	416,
	416,
	416,
	416,
	416,
	416,
	2225,
	2225,
	2225,
	2225,
	2225,
	2225,
	2225,
	2225,
	2225,
	2225,
	416,
	416,
	416,
	416,
	416,
	416,
	416,
	3235,
	3235,
	3235,
	3235,
	3235,
	3235,
	1187,
	1187,
	1187,
	1187,
	1187,
	1187,
	1187,
	1187,
	1187,
	1187,
	1187,
	1187,
	1187,
	1187,
	1187,
	1187,
	1187,
	1187,
	1187,
	1187,
	416,
	416,
	416,
	416,
	416,
	416,
	2275,
	2275,
	2275,
	2275,
	2275,
	2275,
	227,
	227,
	227,
	227,
	227,
	227,
	227,
	227,
	227,
	227,
	227,
	227,
	227,
	227,
	227,
	227,
	227,
	227,
	227,
	227,
	416,
	416,
	416,
	416,
	8,
};

function bool isalnum(int c)
{
	return ACSUtils_AsciiTypes[c] & ACSUTILS_ISALNUM;
}

function bool isalpha(int c)
{
	return ACSUtils_AsciiTypes[c] & ACSUTILS_ISALPHA;
}

function bool isblank(int c)
{
	return ACSUtils_AsciiTypes[c] & ACSUTILS_ISBLANK;
}

function bool iscntrl(int c)
{
	return ACSUtils_AsciiTypes[c] & ACSUTILS_ISCNTRL;
}

function bool isdigit(int c)
{
	return ACSUtils_AsciiTypes[c] & ACSUTILS_ISDIGIT;
}

function bool isgraph(int c)
{
	return ACSUtils_AsciiTypes[c] & ACSUTILS_ISGRAPH;
}

function bool islower(int c)
{
	return ACSUtils_AsciiTypes[c] & ACSUTILS_ISLOWER;
}

function bool isprint(int c)
{
	return ACSUtils_AsciiTypes[c] & ACSUTILS_ISPRINT;
}

function bool ispunct(int c)
{
	return ACSUtils_AsciiTypes[c] & ACSUTILS_ISPUNCT;
}

function bool isspace(int c)
{
	return ACSUtils_AsciiTypes[c] & ACSUTILS_ISSPACE;
}

function bool isupper(int c)
{
	return ACSUtils_AsciiTypes[c] & ACSUTILS_ISUPPER;
}

function bool isxdigit(int c)
{
	return ACSUtils_AsciiTypes[c] & ACSUTILS_ISXDIGIT;
}

#define ASCII_START 0
#define ASCII_END 127
#define ASCII_LETTERS_OFFSET 32

function bool isascii(int c)
{
	return c >= ASCII_START && c <= ASCII_END;
}

function int toupper(int c)
{
	if (islower(c))
		return c - ASCII_LETTERS_OFFSET;
	return c;
}

function int tolower(int c)
{
	if (isupper(c))
		return c + ASCII_LETTERS_OFFSET;
	return c;
}


// String versions
function str StrIsAlNum(str s)
{
	int len = StrLen(s);
	for (int i = 0; i < len; i++)
		if (!isalnum(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsAlpha(str s)
{
	int len = StrLen(s);
	for (int i = 0; i < len; i++)
		if (!isalpha(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsBlank(str s)
{
	int len = StrLen(s);
	for (int i = 0; i < len; i++)
		if (!isblank(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsCntrl(str s)
{
	int len = StrLen(s);
	for (int i = 0; i < len; i++)
		if (!iscntrl(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsDigit(str s)
{
	int len = StrLen(s);
	for (int i = 0; i < len; i++)
		if (!isdigit(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsGraph(str s)
{
	int len = StrLen(s);
	for (int i = 0; i < len; i++)
		if (!isgraph(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsLower(str s)
{
	int len = StrLen(s);
	for (int i = 0; i < len; i++)
		if (!islower(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsPrint(str s)
{
	int len = StrLen(s);
	for (int i = 0; i < len; i++)
		if (!isprint(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsSpace(str s)
{
	int len = StrLen(s);
	for (int i = 0; i < len; i++)
		if (!isspace(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsUpper(str s)
{
	int len = StrLen(s);
	for (int i = 0; i < len; i++)
		if (!isupper(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsXDigit(str s)
{
	int len = StrLen(s);
	for (int i = 0; i < len; i++)
		if (!isxdigit(GetChar(s, i)))
			return false;
			
	return true;
}

function bool StrIsAscii(str s)
{
	int len = StrLen(s);
	for (int i = 0; i < len; i++)
	{
		int char = GetChar(s, i);
		if (char < ASCII_START || char > ASCII_END)
			return false;
	}
	return true;
}

// Case conversion.

function str StrToLower(str s)
{
	str result = "";
	int len = StrLen(s);
	for (int i = 0; i < len; i++)
		result = StrParam(s:result, c:tolower(GetChar(s, i)));
		
	return result;
}

function str StrToUpper(str s)
{
	str result = "";
	int len = StrLen(s);
	for (int i = 0; i < len; i++)
		result = StrParam(s:result, c:toupper(GetChar(s, i)));
		
	return result;
}
