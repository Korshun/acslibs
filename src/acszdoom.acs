int _CachedIsZandronum = -1;
function bool IsZandronum(void)
{
	if (_CachedIsZandronum != -1)
		return _CachedIsZandronum;
		
    SetDBEntry("acsutils", "isZandronum", true);
	
	// ZDoom has no GetDBEntry, so it will return 0.
	// Zandronum will return 1 because the value has been set to 1.
    _CachedIsZandronum = GetDBEntry("acsutils", "isZandronum");
	return _CachedIsZandronum;
}

function bool IsClient(void)
{
	return ConsolePlayerNumber() >= 0;
}

function bool IsOpenGL(void)
{
	return GetCVar("vid_renderer");
}

function void SetInventory(str item, int amount)
{
	TakeInventory(item, INT_MAX);
	GiveInventory(item, amount);
}

function void ToggleInventory(str item)
{
	if (CheckInventory(item) > 0)
		SetInventory(item, 0);
	else
		SetInventory(item, 1);
}

function void SetActorInventory(int tid, str item, int amount)
{
	TakeActorInventory(tid, item, INT_MAX);
	GiveActorInventory(tid, item, amount);
}

function int ScreenWidth(void)
{
	return GetCVar("vid_defwidth");
}

function int ScreenHeight(void)
{
	return GetCVar("vid_defheight");
}

function int AspectRatio(void)
{
	return FixedDiv(ScreenWidth() * 1.0, ScreenHeight() * 1.0);
}

function void ClearHudMessage(int id)
{
	HudMessage(s:""; HUDMSG_PLAIN, id, 0, 0, 0, 0, 0);
}

function str PlayerName(int num)
{
	return StrParam(n:(num+1));
}

function str ActivatorName(void)
{
	return StrParam(n:0);
}

function bool ActivatorIsPlayer(void)
{
	return PlayerNumber() >= 0;
}

function bool ActorIsAlive(int tid)
{
	return GetActorProperty(tid, APROP_HEALTH) > 0;
}

function bool ActivatorIsAlive(void)
{
	return ActorIsAlive(0);
}

function int ActorDistance(int tid1, int tid2)
{
	return length3d(GetActorX(tid2) - GetActorX(tid1),
	                GetActorY(tid2) - GetActorY(tid1),
	                GetActorZ(tid2) - GetActorZ(tid1));
}

function int ActorDistance2D(int tid1, int tid2)
{
	return length2d(GetActorX(tid2) - GetActorX(tid1),
	                GetActorY(tid2) - GetActorY(tid1));
}

function int GetActorSpeed(int tid)
{
	return length3d(GetActorVelX(tid), GetActorVelY(tid), GetActorVelZ(tid));
}

function int GetActorSpeed2D(int tid)
{
	return length2d(GetActorVelX(tid), GetActorVelY(tid));
}

function bool HasRoom(str classname, int x, int y, int z)
{
	int tid = UniqueTid();
	if (!Spawn(classname, x, y, z, tid))
		return false;
	Thing_Remove(tid);
	return true;
}

function int BotCount(void)
{
	int count = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerIsBot(i))
			count++;
	return count;
}

function bool PlayerIsConnected(int player)
{
	return PlayerInGame(player) || PlayerIsSpectator(player);
}

function int ClientCount(void)
{
	int count = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerIsConnected(i))
			count++;
	return count;
}

function int PickRandomPlayer(void)
{
	int players[MAX_PLAYERS];
	int numPlayers = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerInGame(i))
			players[numPlayers++] = i;
	
	if (numPlayers == 0)
		return -1;
	
	return Random(0, numPlayers - 1);
}

function int PickRandomSpectator(void)
{
	int players[MAX_PLAYERS];
	int numPlayers = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerIsSpectator(i))
			players[numPlayers++] = i;
	
	if (numPlayers == 0)
		return -1;
	
	return Random(0, numPlayers - 1);
}

function int PickRandomClient(void)
{
	int players[MAX_PLAYERS];
	int numPlayers = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerIsConnected(i))
			players[numPlayers++] = i;
	
	if (numPlayers == 0)
		return -1;
	
	return Random(0, numPlayers - 1);
}

function int ActorPlayerNumber(int tid)
{
	if (tid == 0)
		return PlayerNumber();

	int prevtid = ActivatorTid();
	int newtid = UniqueTid();
	Thing_ChangeTid(0, newtid);
	
	SetActivator(tid);
	int result = PlayerNumber();
	
	SetActivator(newtid);
	Thing_ChangeTid(0, prevtid);
	return result;
}
