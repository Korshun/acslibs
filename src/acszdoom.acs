#define MAX_PLAYERS 64

int _CachedIsZandronum = -1;
function bool IsZandronum(void)
{
	if (_CachedIsZandronum != -1)
		return _CachedIsZandronum;
		
    SetDBEntry("acsutils", "isZandronum", true);
	
	// ZDoom has no GetDBEntry, so it will return 0.
	// Zandronum will return 1 because the value has been set to 1.
    _CachedIsZandronum = GetDBEntry("acsutils", "isZandronum");
	return _CachedIsZandronum;
}

function bool IsOpenGL(void)
{
	return GetCVar("vid_renderer");
}

function void SetInventory(str item, int amount)
{
	TakeInventory(item, INT_MAX);
	GiveInventory(item, amount);
}

function void SetActorInventory(int tid, str item, int amount)
{
	TakeActorInventory(tid, item, INT_MAX);
	GiveActorInventory(tid, item, amount);
}

function int ScreenWidth(void)
{
	return GetCVar("vid_defwidth");
}

function int ScreenHeight(void)
{
	return GetCVar("vid_defheight");
}

function int AspectRatio(void)
{
	return FixedDiv(ScreenWidth() * 1.0, ScreenHeight() * 1.0);
}

function void ClearHudMessage(int id)
{
	HudMessage(s:""; HUDMSG_PLAIN, id, 0, 0, 0, 0, 0);
}

function str PlayerName(int num)
{
	return StrParam(n:(num+1));
}

function str ActivatorName(void)
{
	return StrParam(n:0);
}

function bool ActivatorIsPlayer(void)
{
	return PlayerNumber() >= 0;
}

function int ActorDistance(int tid1, int tid2)
{
	return length3d(GetActorX(tid2) - GetActorX(tid1),
	                GetActorY(tid2) - GetActorY(tid1),
	                GetActorZ(tid2) - GetActorZ(tid1));
}

function int ActorDistance2D(int tid1, int tid2)
{
	return length2d(GetActorX(tid2) - GetActorX(tid1),
	                GetActorY(tid2) - GetActorY(tid1));
}

function int GetActorSpeed(int tid)
{
	return length3d(GetActorVelX(tid), GetActorVelY(tid), GetActorVelZ(tid));
}

function int GetActorSpeed2D(int tid)
{
	return length2d(GetActorVelX(tid), GetActorVelY(tid));
}
