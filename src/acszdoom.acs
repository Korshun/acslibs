@const int MAX_PLAYERS = 64;
@const int MAX_PLAYERS_ZDOOM = 8;
@const int TEAM_NONE = 255;

// Inventory functions.

function void GiveMaxInventory(str item)
{
	GiveInventory(item, INT_MAX);
}

function void GiveMaxActorInventory(int tid, str item)
{
	GiveActorInventory(tid, item, INT_MAX);
}

function void TakeMaxInventory(str item)
{
	TakeInventory(item, INT_MAX);
}

function void TakeMaxActorInventory(int tid, str item)
{
	TakeActorInventory(tid, item, INT_MAX);
}

function void SetInventory(str item, int amount)
{
	int diff = amount - CheckInventory(item);
	if (diff > 0)
		GiveInventory(item, diff);
	else if (diff < 0)
		TakeInventory(item, -diff);
}

function void SetActorInventory(int tid, str item, int amount)
{
	int diff = amount - CheckActorInventory(tid, item);
	if (diff > 0)
		GiveActorInventory(tid, item, diff);
	else if (diff < 0)
		TakeActorInventory(tid, item, -diff);
}

function void ToggleInventory(str item)
{
	if (CheckInventory(item) > 0)
		SetInventory(item, 0);
	else
		SetInventory(item, 1);
}

function void ToggleActorInventory(int tid, str item)
{
	if (CheckActorInventory(tid, item) > 0)
		SetActorInventory(tid, item, 0);
	else
		SetActorInventory(tid, item, 1);
}


// CVar functions.

function fixed a_GetCVarFixed(str name)
{
	str value = GetCVarString(name);
	if (int(value) != 0)
		return atof(GetCVarString(name));
	return 0.0;
}

function fixed a_GetUserCVarFixed(int player, str name)
{
	str value = GetUserCVarString(player, name);
	if (int(value) != 0)
		return atof(GetUserCVarString(player, name));
	return 0.0;
}


// Screen info functions.

function bool StatusBarVisible(void)
{
	return GetCVar("screenblocks") <= 10;
}


// HudMessage functions

function void ClearHudMessage(int id)
{
	HudMessage(s:""; HUDMSG_PLAIN, id, 0, 0.0, 0.0, 0.0, 0.0);
}

function void ClearHudMessageBold(int id)
{
	HudMessageBold(s:""; HUDMSG_PLAIN, id, 0, 0.0, 0.0, 0.0, 0.0);
}


// Actor information functions

function str ActivatorName(void)
{
	return StrParam(n:0);
}

script "ACSUtils_GetActorName" (int tid)
{
	SetActivator(tid);
	SetResultValue(int(StrParam(n:0)));
}

function str GetActorName(int tid)
{
	return ACS_NamedExecuteWithResult("ACSUtils_GetActorName", tid);
}

function bool IsAlive(void)
{
	if (IsPlayer())
		if (!PlayerInGame(PlayerNumber()))
			return false;
	return GetActorProperty(0, APROP_HEALTH) > 0;
}

function bool ActorIsAlive(int tid)
{
	if (tid == 0 && IsPlayer())
		if (!PlayerInGame(PlayerNumber()))
			return false;
	return GetActorProperty(tid, APROP_HEALTH) > 0;
}

function bool ActorExists(int tid)
{
	if (tid != 0)
		return ClassifyActor(tid) != ACTOR_NONE;
	return notflag(ClassifyActor(tid), ACTOR_WORLD);
}

// Actor math functions.

function fixed ActorDistance(int tid1, int tid2)
{
	return VectorLength3D(GetActorX(tid2) - GetActorX(tid1),
	                      GetActorY(tid2) - GetActorY(tid1),
	                      GetActorZ(tid2) - GetActorZ(tid1));
}

function fixed ActorDistance2D(int tid1, int tid2)
{
	return VectorLength(GetActorX(tid2) - GetActorX(tid1),
	                    GetActorY(tid2) - GetActorY(tid1));
}

function fixed GetActorVelocity(int tid)
{
	return VectorLength3D(GetActorVelX(tid), GetActorVelY(tid), GetActorVelZ(tid));
}

function fixed GetActorXYVelocity(int tid)
{
	return VectorLength(GetActorVelX(tid), GetActorVelY(tid));
}

function fixed GetActorVelocityXY(int tid)
{
	return VectorLength(GetActorVelX(tid), GetActorVelY(tid));
}

// Actor utility functions.

function bool HasRoomFor(str classname, fixed x, fixed y, fixed z)
{
	int tid = UniqueTid();
	if (!Spawn(classname, x, y, z, tid))
		return false;
	Thing_Remove(tid);
	return true;
}

function void LookAtPoint(int tid, fixed x, fixed y, fixed z)
{ 	
	x -= GetActorX(tid);
	y -= GetActorY(tid);
	z -= GetActorZ(tid) + GetActorViewHeight(tid);

	VectorToAngles(x, y, z);
	ang angle = r1;
	ang pitch = r2;

	SetActorAngle(tid, angle);
	SetActorPitch(tid, -pitch);
}

function void LookAt(int tid, int target)
{
	fixed x = GetActorX(target);
	fixed y = GetActorY(target);
	fixed z = GetActorZ(target) + GetActorViewHeight(target);
	LookAtPoint(tid, x, y, z);
}


// ChangeFlag

// Implementation from ACS-X.

function str ACSUtils_ChangeFlagName(str flag, bool value)
{
	return StrParam(s:"ACSUtils_CF_", s:flag, s:"_", d:int(!!value));
}

function void ChangeFlag(str flag, bool value)
{
	GiveInventory(ACSUtils_ChangeFlagName(flag, value), 1);
}

function void ChangeActorFlag(int tid, str flag, bool value)
{
	GiveActorInventory(tid, ACSUtils_ChangeFlagName(flag, value), 1);
}


// Mapping functions.

// From ZDoom wiki.
function int SyncSpeed(int newdistance, int syncdistance, int syncspd)
{
	fixed t = fixeddiv(fixed(syncdistance<<16), fixed(syncspd<<16));
	fixed r = fixeddiv(fixed(newdistance<<16), t);
	return int(r)>>16;
}