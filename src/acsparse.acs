#libdefine PARSENUMBER_SUCCESS 0
#libdefine PARSENUMBER_OVERFLOW 1
#libdefine PARSENUMBER_BADFORMAT 2

function int ACSUtils_CheckRadix(int radix, str functionName)
{
	if (radix <= 0)
	{
		ACSUtils_ProgramError(StrParam(s:functionName, s:": invalid radix ", d:radix, s:". Assuming base 10."));
		return 10;
	}
	else if (radix > 36)
	{
		ACSUtils_ProgramError(StrParam(s:functionName, s:" only supports bases up to 36 (10 digits + 26 letters), but was requested to parse base ", d:radix, s:". Assuming base 10."));
		return 10;
	}
	return radix;
}

function void ACSUtils_ParseSign(str s, int i)
{
	if (GetChar(s, i) == '+')
	{
		r1 = 1;
		r2 = i + 1;
		return;
	}
	else if (GetChar(s, i) == '-')
	{
		r1 = -1;
		r2 = i + 1;
		return;
	}
	
	r1 = 1;
	r2 = i;
	return;
}
	
function void ACSUtils_ParseBasePrefix(str s, int i)
{
	if (StrIEqualsAt(s, i, "0x"))
	{
		r1 = 16;
		r2 = i + 2;
		return;
	}
	else if (StrIEqualsAt(s, i, "0o"))
	{
		r1 = 8;
		r2 = i + 2;
		return;
	}
	else if (StrIEqualsAt(s, i, "0b"))
	{
		r1 = 2;
		r2 = i + 2;
		return;
	}
	
	r1 = 0;
	r2 = i;
	return;
}

function int ACSUtils_ParseDigit(int c, int radix)
{
	int digit;
	if (c >= '0' && c <= '9')
		digit = c - '0';
	else if (c >= 'a' && c <= 'z')
		digit = c - 'a' + 10;
	else if (c >= 'A' && c <= 'Z')
		digit = c - 'A' + 10;
	else
		return -1;
		
	if (digit < radix)
		return digit;
	return -1;
}

function void ParseInt(str s, int radix)
{
	int i = 0;
	int sign = 1;
	radix = ACSUtils_CheckRadix(radix, "ParseInt");
	
	ACSUtils_ParseSign(s, i);
	sign = r1;
	i = r2;

	ACSUtils_ParseBasePrefix(s, i);
	radix = condFalse(r1, radix);
	i = r2;
	
	int len = StrLen(s);
	if (i == len)
	{
		r1 = PARSENUMBER_BADFORMAT;
		r2 = 0;
	}	
	
	int maxresult = cond(sign > 0, INT_MAX, INT_MIN);
	int limit = abs(maxresult / radix);
	int result = 0;
	bool overflowed = false;
	for (; i < len; i++)
	{
		int c = GetChar(s, i);
		int digit = ACSUtils_ParseDigit(c, radix);
		if (digit < 0)
		{
			r1 = PARSENUMBER_BADFORMAT;
			r2 = 0;
			return;
		}
		
		if (limit >= abs(result) && result != INT_MIN)
			result = result * radix + sign * digit;
		else
			overflowed = true;			
	}
	
	if (overflowed)
	{
		r1 = PARSENUMBER_OVERFLOW;
		r2 = maxresult;
		return;
	}
	else
	{
		r1 = PARSENUMBER_SUCCESS;
		r2 = result;
		return;
	}
}
	
function void ParseFixed(str s, int radix)
{
	int i = 0;
	int sign = 1;
	radix = ACSUtils_CheckRadix(radix, "ParseFixed");
	
	ACSUtils_ParseSign(s, i);
	sign = r1;
	i = r2;

	ACSUtils_ParseBasePrefix(s, i);
	radix = condFalse(r1, radix);
	i = r2;
	
	int len = StrLen(s);
	if (i == len)
	{
		r1 = PARSENUMBER_BADFORMAT;
		r2 = 0;
	}
	
	int maxresult = cond(sign > 0, INT_MAX, INT_MIN);
	int limit = abs(maxresult / radix);
	int result = 0;
	bool overflowed = false;
	bool hasfraction = false;
	int digit;
	for (; i < len; i++)
	{
		int c = GetChar(s, i);
		if (c == '.')
		{
			hasfraction = true;
			break;
		}
		
		digit = ACSUtils_ParseDigit(c, radix);
		if (digit < 0)
		{
			r1 = PARSENUMBER_BADFORMAT;
			r2 = 0;
			return;
		}
		
		if (limit >= abs(result) && result != INT_MIN)
			result = result * radix + sign * (digit<<16);
		else
			overflowed = true;			
	}
	
	if (hasfraction)
	{
		i++;
		
		int divisor = radix;
		for (; i < len; i++)
		{
			digit = ACSUtils_ParseDigit(GetChar(s, i), radix);
			if (digit < 0)
			{
				r1 = PARSENUMBER_BADFORMAT;
				r2 = 0;
				return;
			}
			
			if (divisor <= (radix<<16))
			{
				result = result + sign * (digit<<16) / divisor;
				if (sign < 0 && result > 0)
				{
					overflowed = true;
					break;
				}
				divisor *= radix;
			}
		}
	}			
	
	if (overflowed)
	{
		r1 = PARSENUMBER_OVERFLOW;
		r2 = maxresult;
		return;
	}
	else
	{
		r1 = PARSENUMBER_SUCCESS;
		r2 = result;
		return;
	}
}
	

function int atoi(str s)
{
	ParseInt(s, 10);
	return r2;
}

function int atof(str s)
{
	ParseFixed(s, 10);
	return r2;
}

function bool StrIsInt(str s)
{
	ParseInt(s, 10);
	return r1 != PARSENUMBER_BADFORMAT;
}

function bool StrIsFixed(str s)
{
	ParseFixed(s, 10);
	return r1 != PARSENUMBER_BADFORMAT;
}