// Angles

function ang deg2ang(fixed degrees)
{
	return FixedDiv(degrees, 360.0);
}

function ang rad2ang(fixed radians)
{
	return FixedDiv(radians, TAU);
}

function fixed ang2deg(ang angle)
{
	return FixedMul(angle, 360.0);
}

function fixed ang2rad(ang angle)
{
	return FixedMul(angle, TAU);
}

function fixed deg2rad(fixed degrees)
{
	return FixedDiv(degrees, 57.29577951308232);
}

function fixed rad2deg(fixed radians)
{
	return FixedMul(radians, 57.29577951308232);
}

function int ang2byte(fixed angle)
{
    return int(angle)>>8;
}

function fixed byte2ang(int angle)
{
    return fixed(angle<<8);
}

// Gravity

function fixed GetGravityG(void)
{
	int sv_gravity = GetCVar("sv_gravity");
	if (sv_gravity > SHORT_MAX || sv_gravity < SHORT_MIN)
		return IntDiv(sv_gravity, 800);
	return FixedDiv(a_GetCVarFixed("sv_gravity"), 800.0);
}

function void SetGravityG(fixed gravity)
{
	SetGravity(FixedMul(gravity, 800.0));
}

function fixed grav2accel(fixed grav)
{
	return FixedDiv(grav, 800.0);
}

function fixed accel2grav(fixed accel)
{
	return FixedMul(accel, 800.0);
}

function fixed height2jumpz(fixed height, fixed gravity)
{
	return FixedSqrt(fixed(2 * int(FixedMul(height, gravity))));
}

function fixed jumpz2height(fixed jumpz, fixed gravity)
{
	return fixed(int(FixedDiv(FixedMul(jumpz, jumpz), gravity)) / 2);
}
