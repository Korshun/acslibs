function bool IsPlayer(void)
{
	return PlayerNumber() >= 0;
}

script "ACSUtils_ActorPlayerNumber" (int tid)
{
	SetActivator(tid);
	SetResultValue(PlayerNumber());
}

function int ActorPlayerNumber(int tid)
{
	return ACS_NamedExecuteWithResult("ACSUtils_ActorPlayerNumber", tid);
}

function bool ActorIsPlayer(int tid)
{
	return ClassifyActor(tid) & ACTOR_PLAYER;
}

function str PlayerName(int player)
{
	return StrParam(n:player + 1);
}

function int GetPlayerTeam(int player)
{
	return GetPlayerInfo(player, PLAYERINFO_TEAM);
}

function int TeamPlayerCount(int team)
{
	return GetTeamProperty(team, TPROP_NumPlayers);
}


// ConsolePlayer stuff
function bool ConsolePlayerInGame(void)
{
	return PlayerInGame(ConsolePlayerNumber());
}

function str ConsolePlayerName(void)
{
	return PlayerName(ConsolePlayerNumber());
}

function int ConsolePlayerTeam(void)
{
	return GetPlayerTeam(ConsolePlayerNumber());
}

function bool SetActivatorToConsolePlayer(void)
{
	return SetActivatorToPlayer2(ConsolePlayerNumber());
}


function bool SetActivatorToPlayer2(int player)
{
	if (SetActivatorToPlayer(player))
		return true;
		
	if (player >= 0 && player < 8)
		return false;
		
	return SetActivator(0, AAPTR_PLAYER1<<player);
}


// PlayerIsBot is native

function bool PlayerIsConnected(int player)
{
	return PlayerInGame(player) || PlayerIsSpectator(player);
}

function bool PlayerIsDeadSpectator(int player)
{
	return PlayerIsSpectator(player) == 2;
}

// PlayerInGame is native

// PlayerIsSpectator is native


function int BotCount(void)
{
	int count = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerIsBot(i))
			count++;
	return count;
}

function int ClientCount(void)
{
	int count = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerIsConnected(i))
			count++;
	return count;
}

function int DeadSpectatorCount(void)
{
	int count = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerIsDeadSpectator(i))
			count++;
	return count;
}

// PlayerCount is native

function int SpectatorCount(void)
{
	int count = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerIsSpectator(i))
			count++;
	return count;
}


int ACSUtils_Players[MAX_PLAYERS];

function int PickRandomBot(void)
{
	int numPlayers = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerIsBot(i))
			ACSUtils_Players[numPlayers++] = i;
	
	if (numPlayers == 0)
		return -1;
	
	return ACSUtils_Players[Random(0, numPlayers - 1)];
}

function int PickRandomClient(void)
{
	int numPlayers = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerIsConnected(i))
			ACSUtils_Players[numPlayers++] = i;
	
	if (numPlayers == 0)
		return -1;
	
	return ACSUtils_Players[Random(0, numPlayers - 1)];
}

function int PickRandomDeadSpectator(void)
{
	int numPlayers = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerIsDeadSpectator(i))
			ACSUtils_Players[numPlayers++] = i;
	
	if (numPlayers == 0)
		return -1;
	
	return ACSUtils_Players[Random(0, numPlayers - 1)];
}

function int PickRandomPlayer(void)
{
	int numPlayers = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerInGame(i))
			ACSUtils_Players[numPlayers++] = i;
	
	if (numPlayers == 0)
		return -1;
	
	return ACSUtils_Players[Random(0, numPlayers - 1)];
}

function int PickRandomSpectator(void)
{
	int numPlayers = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerIsSpectator(i))
			ACSUtils_Players[numPlayers++] = i;
	
	if (numPlayers == 0)
		return -1;
	
	return ACSUtils_Players[Random(0, numPlayers - 1)];
}

function int PickRandomTeamPlayer(int team)
{
	int numPlayers = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerInGame(i) && GetPlayerTeam(i) == team)
			ACSUtils_Players[numPlayers++] = i;
	
	if (numPlayers == 0)
		return -1;
	
	return ACSUtils_Players[Random(0, numPlayers - 1)];
}
