#define PI 3.1415926535897932384626433832795
#define SQRT_2 1.41421356237
#define MATH_E 2.7182818284590452353602874713526624977572470937

// Generic functions.

// num min(num a, num b)
function int min(int a, int b)
{
	if (a < b)
		return a;
	return b;
}

// num max(num a, num b)
function int max(int a, int b)
{
	if (a > b)
		return a;
	return b;
}

// num clamp(num x, num a, num b)
function int clamp(int x, int a, int b)
{
	if (x > b)
		return b;
	if (x < a)
		return a;
	return x;
}	

// int sign(num x)
function int sign(int x)
{
	if (x > 0)
		return 1;
	if (x < 0)
		return -1;
	return 0;
}

// num abs(num x)
function int abs(int x)
{
	if (x > 0)
		return x;
	return -x;
}

// From commonFuncs.h by Ijon Tichy.
// num middle(num a, num b, num c)
function int middle(int x, int y, int z)
{
    if ((x < z) && (y < z)) { return max(x, y); }
    return max(min(x, y), z);
}

// int cmp(num a, num b)
function int cmp(int a, int b)
{
	if (a > b)
		return 1;
	if (a < b)
		return -1;
	return 0;
}


// Rounding.

// fixed trunc(fixed x)
function int trunc(int x)
{
	return x & 0xffff0000;
}

// fixed floor(fixed x)
function int floor(int x)
{
	if (x < 0)
		x++;
	return trunc(x);
}

// fixed ceil(fixed x)
function int ceil(int x)
{
	if (x > 0)
		x++;
	return trunc(x);
}

// fixed round(fixed x)
function int round(int x)
{
	return trunc(x + 0.5);
}

// int itrunc(fixed x)
function int itrunc(int x)
{
	return trunc(x)>>16;
}

// int ifloor(fixed x)
function int ifloor(int x)
{
	return floor(x)>>16;
}

// int iceil(fixed x)
function int iceil(int x)
{
	return ceil(x)>>16;
}

// int iround(fixed x)
function int iround(int x)
{
	return round(x)>>16;
}


// Numeric algorithms.

// int ipow(int x, int y)
function int ipow(int x, int y)
{
    int n = 1;
    while (y-- > 0)
		n *= x;
    return n;
}

// fixed fpow(fixed x, int y)
function int fpow(int x, int y)
{
	int n = 1.0;
	if (y > 0)
	{
		while (y-- > 0)
			n = FixedMul(n, x);
		return n;
	}
	
	while (y++ < 0)
		n = FixedDiv(n, x);
	return n;
}

// fixed lerp(fixed a, fixed b, fixed alpha)
function int lerp(int a, int b, int alpha)
{
	return FixedMul(a, 1.0 - alpha) + FixedMul(b, alpha);
}

// From ZDoom wiki.
// int zan_Sqrt(int number)
function int zan_Sqrt(int number)
{
	if(number <= 3) { return number > 0; }

	int oldAns = number >> 1,                     // initial guess
	    newAns = (oldAns + number / oldAns) >> 1; // first iteration

	// main iterative method
	while(newAns < oldAns)
	{
		oldAns = newAns;
		newAns = (oldAns + number / oldAns) >> 1;
	}

	return oldAns;
}

// From commonFuncs.h by Ijon Tichy.
// FIXME: does this work for fixeds?
// int gcf(int a, int b)
function int gcf(int a, int b)
{
    int c;
    while (1)
    {
        if (b == 0) { return a; }
        c = a % b;
        a = b;
        b = c;
    }
    
    return -1;
}


// Angle conversions.

// angle deg2angle(fixed degrees)
function int deg2angle(int degrees)
{
	return FixedDiv(degrees, 360.0);
}

// angle rad2angle(fixed radians)
function int rad2angle(int radians)
{
	return FixedDiv(radians, PI * 2);
}

// fixed angle2deg(angle angle)
function int angle2deg(int angle)
{
	return FixedMul(angle, 360.0);
}

// fixed angle2rad(angle angle)
function int angle2rad(int angle)
{
	return FixedMul(angle, PI * 2);
}

// fixed deg2rad(fixed degrees)
function int deg2rad(int degrees)
{
	return angle2rad(deg2angle(degrees));
}

// fixed rad2deg(fixed radians)
function int rad2deg(int radians)
{
	return angle2deg(rad2angle(radians));
}


// Trigonometry.

// fixed tan(angle x)
function int tan(int x)
{
	return FixedDiv(sin(x), cos(x));
}

// fixed atan(angle x)
function int atan(int x)
{
	return FixedDiv(cos(x), sin(x));
}

// fixed sec(angle x)
function int sec(int x)
{
	return FixedDiv(1.0, sin(x));
}

//fixed cosec(angle x)
function int cosec(int x)
{
	return FixedDiv(1.0, cos(x));
}


// Vectors.

// fixed, fixed RotateVector(fixed x, fixed y, angle angle);
function void RotateVector(int x, int y, int angle)
{
	// Rotate around Z axis.
	int s = sin(-angle);
	int c = cos(-angle);
	r1 = FixedMul(x, c) - FixedMul(y, s);
	r2 = FixedMul(x, s) + FixedMul(y, c);
}	

// fixed, fixed RotatePoint(fixed x, fixed y, fixed originX, fixed originY, angle angle)
function void RotatePoint(int x, int y, int originX, int originY, int angle)
{
	x -= originX;
	y -= originY;
	RotateVector(x, y, angle);
	r1 += originX;
	r2 += originY;
}

// angle, angle VectorToAngles(fixed x, fixed y, fixed z)
function void VectorToAngles(int x, int y, int z)
{
	int xy = length2d(x, y);
		
	r1 = VectorAngle(x, y);
	r2 = -VectorAngle(xy, z);
}

// From ZDoom wiki. Modified to work on coordinates instead of actors.
// fixed length3d(fixed x, fixed y, fixed z)
function int length3d(int x, int y, int z)
{
	 int len;

	 int ang = vectorangle(x,y);
	 if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(y, sin(ang));
	 else len = fixeddiv(x, cos(ang));

	 ang = vectorangle(len, z);
	 if(((ang+0.125)%0.5) > 0.25) return fixeddiv(z, sin(ang));
	 return fixeddiv(len, cos(ang));
}

// The function above simplified for 2D.
// fixed length2d(fixed x, fixed y)
function int length2d(int x, int y)
{
	 int ang = vectorangle(x,y);
	 if(((ang+0.125)%0.5) > 0.25) return fixeddiv(y, sin(ang));
	 return fixeddiv(x, cos(ang));
}

// fixed length2d2(int x, int y)
function int length2d2(int x, int y)
{
	return FixedMul(x, x) + FixedMul(y, y);
}

// fixed length3d2(int x, int y, int z)
function int length3d2(int x, int y, int z)
{
	return FixedMul(x, x) + FixedMul(y, y) + FixedMul(z, z);
}

// fixed dot2(fixed x1, fixed y1, fixed x2, fixed y2)
function int dot2(int x1, int y1, int x2, int y2)
{
	return FixedMul(x1, x2) + FixedMul(y1, y2);
}

// fixed dot3(fixed x1, fixed y1, fixed z1, fixed x2, fixed y2, fixed z2)
function int dot3(int x1, int y1, int z1, int x2, int y2, int z2)
{
	return FixedMul(x1, x2) + FixedMul(y1, y2) + FixedMul(z1, z2);
}

// fixed, fixed normalize2d(fixed x, fixed y)
function void normalize2d(int x, int y)
{
	int l = length2d(x, y);
	r1 = FixedDiv(x, l);
	r2 = FixedDiv(y, l);
}

// fixed, fixed, fixed normalize3d(fixed x, fixed y, fixed z)
function void normalize3d(int x, int y, int z)
{
	int l = length3d(x, y, z);
	r1 = FixedDiv(x, l);
	r2 = FixedDiv(y, l);
	r3 = FixedDiv(z, l);
}
