#define PI 3.1415926535897932384626433832795
#define SQRT_2 1.41421356237
#define MATH_E 2.7182818284590452353602874713526624977572470937

// num min(num a, num b)
function int min(int a, int b)
{
	if (a < b)
		return a;
	return b;
}

// num max(num a, num b)
function int max(int a, int b)
{
	if (a > b)
		return a;
	return b;
}

// num clamp(num x, num a, num b)
function int clamp(int x, int a, int b)
{
	if (x > b)
		return b;
	if (x < a)
		return a;
	return x;
}	

// int sign(num x)
function int sign(int x)
{
	if (x > 0)
		return 1;
	if (x < 0)
		return -1;
	return 0;
}

// num abs(num x)
function int abs(int x)
{
	if (x > 0)
		return x;
	return -x;
}

// fixed lerp(fixed a, fixed b, fixed alpha)
function int lerp(int a, int b, int alpha)
{
	return FixedMul(a, 1.0 - alpha) + FixedMul(b, alpha);
}

// fixed tan(angle x)
function int tan(int x)
{
	return FixedDiv(sin(x), cos(x));
}

// fixed atan(angle x)
function int atan(int x)
{
	return FixedDiv(cos(x), sin(x));
}

// fixed sec(angle x)
function int sec(int x)
{
	return FixedDiv(1.0, sin(x));
}

//fixed cosec(angle x)
function int cosec(int x)
{
	return FixedDiv(1.0, cos(x));
}

// fixed, fixed RotateVector(fixed x, fixed y, angle angle);
function void RotateVector(int x, int y, int angle)
{
	// Rotate around Z axis.
	int s = sin(-angle);
	int c = cos(-angle);
	r1 = FixedMul(x, c) - FixedMul(y, s);
	r2 = FixedMul(x, s) + FixedMul(y, c);
}	

// fixed, fixed RotatePoint(fixed x, fixed y, fixed originX, fixed originY, angle angle)
function void RotatePoint(int x, int y, int originX, int originY, int angle)
{
	x -= originX;
	y -= originY;
	RotateVector(x, y, angle);
	r1 += originX;
	r2 += originY;
}

// angle, angle VectorToAngles(fixed x, fixed y, fixed z)
function void VectorToAngles(int x, int y, int z)
{
	int xy = length2d(x, y);
		
	r1 = VectorAngle(x, y);
	r2 = -VectorAngle(xy, z);
}

// From ZDoom wiki. Modified to work on coordinates instead of actors.
// fixed length3d(fixed x, fixed y, fixed z)
function int length3d(int x, int y, int z)
{
	 int len;

	 int ang = vectorangle(x,y);
	 if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(y, sin(ang));
	 else len = fixeddiv(x, cos(ang));

	 ang = vectorangle(len, z);
	 if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(z, sin(ang));
	 else len = fixeddiv(len, cos(ang));

	 return len;
}

// The function above simplified for 2D.
// fixed length2d(fixed x, fixed y)
function int length2d(int x, int y)
{
	 int len;

	 int ang = vectorangle(x,y);
	 if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(y, sin(ang));
	 else len = fixeddiv(x, cos(ang));

	 return len;
}

// From ZDoom wiki.
function int zan_Sqrt(int number)
{
	if(number <= 3) { return number > 0; }

	int oldAns = number >> 1,                     // initial guess
	    newAns = (oldAns + number / oldAns) >> 1; // first iteration

	// main iterative method
	while(newAns < oldAns)
	{
		oldAns = newAns;
		newAns = (oldAns + number / oldAns) >> 1;
	}

	return oldAns;
}

function int ipow(int x, int y)
{
    y--;
    while (y--)
		x *= x;
    return x;
}

// fixed fpow(fixed x, int y)
function int fpow(int x, int y)
{
	y--;
	while (y--)
		x = FixedMul(x, x);
	return x;
}

// fixed ClearFraction(fixed x)
function int ClearFraction(int x)
{
	return (x>>16)<<16;
}

// int round(fixed x)
function int round(int x)
{
	if (x > 0)
	{
		if ((x & 0x0000ffff) > 0.5)
			return (x>>16) + 1;
		return (x>>16);
	}
	
	x = -x;
	
	if ((x & 0x0000ffff) > 0.5)
		return -(x>>16) - 1;
	return -(x>>16);
}
