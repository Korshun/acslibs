function void ACSUtils_SendString(bool named, int scriptid, str s)
{
	if (named && IsZandronum212())
	{
		ProgramError("ACS_NamedSendString(): Zandronum 2.1.2 doesn't support named scripts");
		return;
	}

	int i;
	int index;
	int a, b, c, d;
	
	// For singleplayer, just pass the whole string.
	if (IsClient())
	{
		ACSUtils[ACSUTILS_SendStringSingleplayer] = true;
		ACSUtils[ACSUTILS_ReceivedString] = s;
		if (named)
			ACS_NamedExecuteWithResult(scriptid, 0);
		else
			ACS_ExecuteWithResult(scriptid, 0);
		return;
	}
	
	ACSUtils[ACSUTILS_SendStringIsServer] = true;
	ACSUtils[ACSUTILS_SendStringReceiver] = scriptid;
	ACSUtils[ACSUTILS_SendStringReceiverIsNamed] = named;

	if (IsZandronum212())
	{
		// Send chunks in reverse order because clientside scripts are executed in reverse order.
		// Use >= instead of > to send 0 even if the string size is a multiple of 12.
		for (i = StrLen(s) / 12; i >= 0; i--)
		{
			index = i * 12;
			a = PackBytes
			(
				GetChar(s, index), 
				GetChar(s, index + 1), 
				GetChar(s, index + 2), 
				GetChar(s, index + 3)
			);
			
			b = PackBytes
			(
				GetChar(s, index + 4),
				GetChar(s, index + 5),
				GetChar(s, index + 6),
				GetChar(s, index + 7)
			);
			
			c = PackBytes
			(
				GetChar(s, index + 8),
				GetChar(s, index + 9),
				GetChar(s, index + 10),
				GetChar(s, index + 11)
			);
		
			// Zandronum 2.1.2 loses ExecuteWithResult arguments.
			ACS_ExecuteAlways(scriptid, 0, a, b, c);
		}
	}
	else
	{
		// Send chunks in reverse order because clientside scripts are executed in reverse order.
		// Use <= instead of < to send 0 even if the string size is a multiple of 16.
		for (i = StrLen(s) / 16; i >= 0; i--)
		{	
			index = i * 16;
			a = PackBytes
			(
				GetChar(s, index), 
				GetChar(s, index + 1), 
				GetChar(s, index + 2), 
				GetChar(s, index + 3)
			);
			
			b = PackBytes
			(
				GetChar(s, index + 4),
				GetChar(s, index + 5),
				GetChar(s, index + 6),
				GetChar(s, index + 7)
			);
			
			c = PackBytes
			(
				GetChar(s, index + 8),
				GetChar(s, index + 9),
				GetChar(s, index + 10),
				GetChar(s, index + 11)
			);

			d = PackBytes
			(
				GetChar(s, index + 12),
				GetChar(s, index + 13),
				GetChar(s, index + 14),
				GetChar(s, index + 15)
			);
			
			if (named)
				ACS_NamedExecuteWithResult(scriptid, a, b, c, d);
			else
				ACS_ExecuteWithResult(scriptid, a, b, c, d);
				
			if (!ACSUtils[ACSUTILS_SendStringIsServer])
				break;
		}
	}
	
	ACSUtils[ACSUTILS_SendStringIsServer] = false;
}

function void ACS_SendString(int scriptnum, str s)
{
	ACSUtils_SendString(false, scriptnum, s);
}

function void ACS_NamedSendString(str scriptname, str s)
{
	ACSUtils_SendString(true, scriptname, s);
}

function str GetReceivedString(void)
{
	return ACSUtils[ACSUTILS_ReceivedString];
}

function bool ReceiveString(int a, int b, int c, int d)
{
	if (ACSUtils[ACSUTILS_SendStringSingleplayer])
	{
		ACSUtils[ACSUTILS_SendStringSingleplayer] = false;
		ACSUtils[ACSUTILS_SendStringFinished] = true;
		return true;
	}
	
	if (ACSUtils[ACSUTILS_SendStringIsServer])
	{
		ACSUtils[ACSUTILS_SendStringIsServer] = false;
	
		str receiver;
		if (ACSUtils[ACSUTILS_SendStringReceiverIsNamed])
			receiver = StrParam(s:"\"", s:ACSUtils[ACSUTILS_SendStringReceiver], s:"\"");
		else
			receiver = StrParam(d:ACSUtils[ACSUTILS_SendStringReceiver]);
			
		ProgramError(StrParam(s:"A serverside script attemped to send a string to *serverside* script ", s:receiver, s:".")); 
		return false;
	}

	if (ACSUtils[ACSUTILS_SendStringFinished])
	{
		ACSUtils[ACSUTILS_ReceivedString] = "";
		ACSUtils[ACSUTILS_SendStringFinished] = false;
	}
	
	str chunk;
	if (IsZandronum212())
	{
		chunk = StrParam
		(
			c:UnpackByte1(a), c:UnpackByte2(a), c:UnpackByte3(a), c:UnpackByte4(a),
			c:UnpackByte1(b), c:UnpackByte2(b), c:UnpackByte3(b), c:UnpackByte4(b),
			c:UnpackByte1(c), c:UnpackByte2(c), c:UnpackByte3(c), c:UnpackByte4(c)
		);
		
		ACSUtils[ACSUTILS_ReceivedString] = StrParam(s:ACSUtils[ACSUTILS_ReceivedString], s:chunk);
		
		if (StrLen(chunk) == 12)
			return false;
	}
	else
	{
		chunk = StrParam
		(
			c:UnpackByte1(a), c:UnpackByte2(a), c:UnpackByte3(a), c:UnpackByte4(a),
			c:UnpackByte1(b), c:UnpackByte2(b), c:UnpackByte3(b), c:UnpackByte4(b),
			c:UnpackByte1(c), c:UnpackByte2(c), c:UnpackByte3(c), c:UnpackByte4(c),
			c:UnpackByte1(d), c:UnpackByte2(d), c:UnpackByte3(d), c:UnpackByte4(d)
		);
		
		ACSUtils[ACSUTILS_ReceivedString] = StrParam(s:ACSUtils[ACSUTILS_ReceivedString], s:chunk);
		
		if (StrLen(chunk) == 16)
			return false;
	}

	ACSUtils[ACSUTILS_SendStringFinished] = true;
	return true;
}
