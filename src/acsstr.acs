#define ASCII_LETTERS_BIG_START 	65 	// A
#define ASCII_LETTERS_BIG_END		90 	// Z
#define ASCII_LETTERS_SMALL_START	97 	// a
#define ASCII_LETTERS_SMALL_END		122 	// z

function str StrAdd(str a, str b)
{
	return StrParam(s:a, s:b);
}

function bool StrEquals(str a, str b)
{
    return StrCmp(a, b) == 0;
}	

// By Korshun.
function bool StrEqualsAt(str s, int pos, str sub)
{
	int len = StrLen(sub);
	if (pos + len > StrLen(s))
		return false;
	
	for (int i = 0; i < len; i++)
	{
		if (GetChar(s, pos + i) != GetChar(sub, i))
			return false;
	}
			
	return true;
}

function bool StrFind(str a, str b)
{
	int pos, j;
	for(int i = 0; i < (StrLen(a) - StrLen(b) + 1); i++)
	{
		j = 0;
		while((j < StrLen(b))&&(GetChar(b, j) == GetChar(a, i+j)))
			j++;
		if(j == StrLen(b))
			return i;
	}
	return -1;
}

function str StrSub(str a, str b)
{
	int pos = StrFind(a, b);
	if(pos == -1)
		return a;
	return StrCut(a, pos, pos+StrLen(b)-1);
}

function str StrSlice(str s, int l, int r)
{
	if(r-l <= 0)
		return s;
	if(r-l)
		return StrMid(s, l, StrLen(s)-r-1);
		
	return StrMid(s, l, StrLen(s)-r);
}

function str StrCut(str s, int l, int r)
{
	if(r-l <= 0)
		return s;
	if(r-l)
		return StrParam(s:StrLeft(s, l), s:StrRight(s, StrLen(s)-r-1));
		
	return StrParam(s:StrLeft(s, l), s:StrRight(s, StrLen(s)-r));
}

function bool StrHasColorCodes(str s)
{
	for(int i = 0; i < StrLen(s); i++)
	{
		if(GetChar(s, i) == 28)
			return true;
	}
	return false;
}

function str StrStripColorCodes(str s)
{
	str tempstr = "";
	for(int i = 0; i < StrLen(s); i++)
	{
		int char = GetChar(s, i);
		if(char != 28)
			tempstr = StrParam(s:tempstr, c:char);
		else i++;
	}
	return tempstr;
}

function str StrReverse(str s)
{
	str tempstr = "";
	for(int i = StrLen(s)-1; i >= 0; i--)
		tempstr = StrParam(s:tempstr, c:GetChar(s, i));
	return tempstr;
}

function bool StrIsEmpty(str s)
{
	if(!GetChar(s, 0))
		return true;
	return false;
}


// acsctype wrappers. 

function str StrIsAlNum(str s)
{
	for (int i = 0; i < StrLen(s); i++)
		if (!isalnum(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsAlpha(str s)
{
	for (int i = 0; i < StrLen(s); i++)
		if (!isalpha(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsBlank(str s)
{
	for (int i = 0; i < StrLen(s); i++)
		if (!isblank(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsCntrl(str s)
{
	for (int i = 0; i < StrLen(s); i++)
		if (!iscntrl(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsDigit(str s)
{
	for (int i = 0; i < StrLen(s); i++)
		if (!isdigit(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsGraph(str s)
{
	for (int i = 0; i < StrLen(s); i++)
		if (!isgraph(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsLower(str s)
{
	for (int i = 0; i < StrLen(s); i++)
		if (!islower(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsPrint(str s)
{
	for (int i = 0; i < StrLen(s); i++)
		if (!isprint(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsSpace(str s)
{
	for (int i = 0; i < StrLen(s); i++)
		if (!isspace(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsUpper(str s)
{
	for (int i = 0; i < StrLen(s); i++)
		if (!isupper(GetChar(s, i)))
			return false;
			
	return true;
}

function str StrIsXDigit(str s)
{
	for (int i = 0; i < StrLen(s); i++)
		if (!isxdigit(GetChar(s, i)))
			return false;
			
	return true;
}

function bool StrIsAscii(str s)
{
	for (int i = 0; i < StrLen(s); i++)
	{
		str char = GetChar(s, i);
		if (char < ASCII_START || char > ASCII_END)
			return false;
	}
	return true;
}

// Case conversion.

function str StrToLower(str s)
{
	str result = "";
	for (int i = 0; i < StrLen(s); i++)
		result = StrParam(s:result, c:tolower(GetChar(s, i)));
		
	return result;
}

function str StrToUpper(str s)
{
	str result = "";
	for (int i = 0; i < StrLen(s); i++)
		result = StrParam(s:result, c:toupper(GetChar(s, i)));
		
	return result;
}