// Basic
function bool StrIsEmpty(str s)
{
	if (!GetChar(s, 0))
		return true;
	return false;
}


// StrAdd
function str StrAdd(str a, str b)
{
	return StrParam(s:a, s:b);
}

function str StrAddInt(str a, int b)
{
	return StrParam(s:a, d:b);
}

function str StrAddChar(str a, int b)
{
	return StrParam(s:a, c:b);
}

function str StrAddFixed(str a, int b)
{
	return StrParam(s:a, f:b);
}

// StrEquals
function bool StrEquals(str a, str b)
{
    return StrCmp(a, b) == 0;
}	

function bool StrIEquals(str a, str b)
{
	return StrICmp(a, b) == 0;
}

function bool StrEqualsAt(str s, int where, str what)
{
	int len = StrLen(what);
	if (where + len > StrLen(s))
		return false;
	
	return StrEquals(StrMid(s, where, len), what);
}

function bool StrIEqualsAt(str s, int where, str what)
{
	int len = StrLen(what);
	if (where + len > StrLen(s))
		return false;
	
	return StrIEquals(StrMid(s, where, len), what);
}

function bool StrStartsWith(str s, str sub)
{
	return StrEqualsAt(s, 0, sub);
}

function bool StrStartsWithI(str s, str sub)
{
	return StrIEqualsAt(s, 0, sub);
}

function bool StrEndsWith(str s, str what)
{
	int len1 = StrLen(s);
	int len2 = StrLen(what);

	if (len1 < len2)
		return false;
	return StrEqualsAt(s, len1 - len2, what);
}

function bool StrEndsWithI(str s, str what)
{
	int len1 = StrLen(s);
	int len2 = StrLen(what);

	if (len1 < len2)
		return false;
	return StrIEqualsAt(s, len1 - len2, what);
}

// StrFind
function int StrFind(str s, str what)
{
	return StrFindFrom(s, what, 0);
}

function int StrFindI(str s, str what)
{
	return StrFindFromI(s, what, 0);
}

function int StrRFind(str s, str what)
{
	return StrRFindFrom(s, what, StrLen(s) - 1);
}

function int StrRFindI(str s, str what)
{
	return StrRFindFromI(s, what, StrLen(s) - 1);
}

function int StrFindFrom(str s, str what, int start)
{
	int len = StrLen(s) - StrLen(what);
	for (int i = start; i <= len; i++)
	{
		if (StrEqualsAt(s, i, what))
			return i;
	}
	
	return -1;
}

function int StrFindFromI(str s, str what, int start)
{
	int len = StrLen(s) - StrLen(what);
	for (int i = start; i <= len; i++)
	{
		if (StrIEqualsAt(s, i, what))
			return i;
	}
	
	return -1;
}

function int StrRFindFrom(str s, str what, int start)
{
	int len = StrLen(s) - StrLen(what);
	for (int i = start; i >= 0; i--)
	{
		if (StrEqualsAt(s, i, what))
			return i;
	}
	
	return -1;
}

function int StrRFindFromI(str s, str what, int start)
{
	int len = StrLen(s) - StrLen(what);
	for (int i = start; i >= 0; i--)
	{
		if (StrIEqualsAt(s, i, what))
			return i;
	}
	
	return -1;
}

// StrRemove
function str StrRemove(str s, str what)
{
	return StrReplace(s, what, "");
}

function str StrRemoveI(str s, str what)
{
	return StrReplaceI(s, what, "");
}

function str StrRemoveFirst(str s, str what)
{
	return StrRemoveFirstFrom(s, what, 0);
}

function str StrRemoveFirstI(str s, str what)
{
	return StrRemoveFirstFromI(s, what, 0);
}

function str StrRemoveLast(str s, str what)
{
	return StrRemoveLastFrom(s, what, StrLen(s) - 1);
}

function str StrRemoveLastI(str s, str what)
{
	return StrRemoveLastFromI(s, what, StrLen(s) - 1);
}

function str StrRemoveFirstFrom(str s, str what, int start)
{
	int pos = StrFindFrom(s, what, start);
	if (pos != -1)
		return StrCut(s, pos, StrLen(what));
	return s;
}

function str StrRemoveFirstFromI(str s, str what, int start)
{
	int pos = StrFindFromI(s, what, start);
	if (pos != -1)
		return StrCut(s, pos, StrLen(what));
	return s;
}

function str StrRemoveLastFrom(int s, str what, int start)
{
	int pos = StrRFindFrom(s, what, start);
	if (pos != -1)
		return StrCut(s, pos, StrLen(what));
	return s;
}

function str StrRemoveLastFromI(int s, str what, int start)
{
	int pos = StrRFindFromI(s, what, start);
	if (pos != -1)
		return StrCut(s, pos, StrLen(what));
	return s;
}

// StrReplace
function str StrReplace(str s, str what, str with)
{
	int len1 = StrLen(s);
	int len2 = StrLen(what);
	int start = 0;
	int end = 0;
	str result = "";

	while (true)
	{
		end = StrFindFrom(s, what, start);
		if (end == -1)
		{
			result = StrParam(s:result, s:StrSlice(s, start, end));
			break;
		}

		result = StrParam(s:result, s:StrSlice(s, start, end), s:with);
		start = end + len2;
	}
	
	return result;
}

function str StrReplaceI(str s, str what, str with)
{
	int len1 = StrLen(s);
	int len2 = StrLen(what);
	int start = 0;
	int end = 0;
	str result = "";

	while (true)
	{
		end = StrFindFromI(s, what, start);
		if (end == -1)
		{
			result = StrParam(s:result, s:StrSlice(s, start, end));
			break;
		}

		result = StrParam(s:result, s:StrSlice(s, start, end), s:with);
		start = end + len2;
	}
	
	return result;
}

function str StrReplaceFirst(str s, str what, str with)
{
	return StrReplaceFirstFrom(s, what, with, 0);
}

function str StrReplaceFirstI(str s, str what, str with)
{
	return StrReplaceFirstFromI(s, what, with, 0);
}

function str StrReplaceLast(str s, str what, str with)
{
	return StrReplaceLastFrom(s, what, with, StrLen(s) - 1);
}

function str StrReplaceLastI(str s, str what, str with)
{
	return StrReplaceLastFromI(s, what, with, StrLen(s) - 1);
}

function str StrReplaceFirstFrom(str s, str what, str with, int start)
{
	int pos = StrFind(s, what);
	if (pos != -1)
		return StrInsert(StrCut(s, pos, StrLen(what)), pos, with);
	return s;
}

function str StrReplaceFirstFromI(str s, str what, str with, int start)
{
	int pos = StrFindI(s, what);
	if (pos != -1)
		return StrInsert(StrCut(s, pos, StrLen(what)), pos, with);
	return s;
}

function str StrReplaceLastFrom(str s, str what, str with, int start)
{
	int pos = StrRFind(s, what);
	if (pos != -1)
		return StrInsert(StrCut(s, pos, StrLen(what)), pos, with);
	return s;
}

function str StrReplaceLastFromI(str s, str what, str with, int start)
{
	int pos = StrRFindI(s, what);
	if (pos != -1)
		return StrInsert(StrCut(s, pos, StrLen(what)), pos, with);
	return s;
}

// Misc
function str LeftPad(str s, int c, int size)
{
	int len = StrLen(s);
	if (len >= size)
		return s;
		
	int diff = size - len;
	str pad = "";
	for (int i = 0; i < diff; i++)
		pad = StrParam(s:pad, c:c);
		
	return StrParam(s:pad, s:s);
}

function str RightPad(str s, int c, int size)
{
	int len = StrLen(s);
	if (len >= size)
		return s;
		
	int diff = size - len;
	str pad = "";
	for (int i = 0; i < diff; i++)
		pad = StrParam(s:pad, c:c);
		
	return StrParam(s:s, s:pad);
}

function str StrCapitalize(str s)
{
	if (StrLen(s) == 0)
		return "";

	str result = StrParam(c:toupper(GetChar(s, 0)));
	int len = StrLen(s);
	for (int i = 0; i < len; i++)
		result = StrParam(s:result, c:tolower(GetChar(s, i)));

	return result;
}

function str StrCut(str s, int start, int length)
{
	return StrParam(s:StrLeft(s, start), s:StrRightFrom(s, start + length));
}

function str StrCutRange(str s, int start, int end)
{
	return StrParam(s:StrLeft(s, start), s:StrRightFrom(s, end));
}

function str StrEscape(str s)
{
	str result = "";
	int len = StrLen(s);
	for (int i = 0; i < len; i++)
	{
		int c = GetChar(s, i);
		switch (c)
		{
		case '\a':
			result = StrParam(s:result, s:"\\a");
			break;
		case '\b':
			result = StrParam(s:result, s:"\\b");
			break;
		case COLORCODE: // '\c' is not supported by ACC
			result = StrParam(s:result, s:"\\c");
			break;
		case '\f':
			result = StrParam(s:result, s:"\\f");
			break;
		case '\n':
			result = StrParam(s:result, s:"\\n");
			break;
		case '\r':
			result = StrParam(s:result, s:"\\r");
			break;
		case '\t':
			result = StrParam(s:result, s:"\\t");
			break;
		case '\v':
			result = StrParam(s:result, s:"\\v");
			break;
		case '\\':
			result = StrParam(s:result, s:"\\\\");
			break;
		case '\'':
			result = StrParam(s:result, s:"'");
			break;
		case '"':
			result = StrParam(s:result, s:"\"");
			break;
		default:
			result = StrParam(s:result, c:c);
			break;
		}
	}
	return result;
}

function str StrInsert(str s, int where, str what)
{
	return StrParam(s:StrLeft(s, where), s:what, s:StrRightFrom(s, where));
}

function str StrSlice(str s, int start, int end)
{
	return StrMid(s, start, end - start);
}

function void StrSplit(str s, str separator)
{
	int pos = StrFind(s, separator);
	if (pos != -1)
	{
		r1 = StrLeft(s, pos);
		r2 = StrRightFrom(s, pos + StrLen(separator));
	}
	else
	{
		r1 = s;
		r2 = "";
	}
}

function str StrRightFrom(str s, int from)
{
	return StrRight(s, StrLen(s) - from);
}

function str StrRepeat(str s, int n)
{
	int result = "";
	for (int i = 0; i < n; i++)
		result = StrAdd(result, s);
	return result;
}

function str StrRepr(str s)
{
	return StrParam(c:'"', s:StrEscape(s), c:'"');
}

function str StrReverse(str s)
{
	str tempstr = "";
	for(int i = StrLen(s)-1; i >= 0; i--)
		tempstr = StrParam(s:tempstr, c:GetChar(s, i));
	return tempstr;
}

// Color codes.
function bool IsColorCodeChar(int c)
{
	return (c >= 'a' && c <= 'v')
		|| c == '-'
		|| c == '+'
		|| c == '*'
		|| c == '!';
}

function int SkipColorCodeAt(str s, int i)
{
	if (GetChar(s, i) == COLORCODE)
	{
		i++;
	}
	else
	{
		return i;
	}
	
	if (GetChar(s, i) == '[')
	{
		int len = StrLen(s);
		for (; i < len; i++)
		{
			if (GetChar(s, i) == ']')
			{
				i++;
				break;
			}
		}
	}
	else if (IsColorCodeChar(GetChar(s, i)))
	{
		return i + 1;
	}
	
	return i;
}
	
function str GetColorCodeAt(str s, int i)
{
	return StrSlice(s, i, SkipColorCodeAt(s, i));
}
	
function bool HasColorCodes(str s)
{
	int len = StrLen(s);
	for (int i = 0; i < len; i++)
	{
		if (GetChar(s, i) == COLORCODE)
			i += 1;
		else
			continue;
			
		int c = GetChar(s, i);
		if (c == '[' || IsColorCodeChar(c))
			return true;
	}
	return false;
}

function str StripColorCodes(str s)
{
	str result = "";
	for (int i = 0; i < StrLen(s); i++)
	{
		i = SkipColorCodeAt(s, i);
		result = StrParam(s:result, c:GetChar(s, i));
	}

	return result;
}
