#!/usr/bin/python3

prefixfiles = [	
	"acsversion.acs",
	"acsretval.acs",
	"acshudlibdef.acs",
]

files = [
	"acserror.acs",
	"acsmath.acs",
	"acsctype.acs",
	"acsstr.acs",
	"acszdoom.acs",
	"acspack.acs",
	"acsinput.acs",
	"acsunits.acs",
	"acsparse.acs",
	"acsaprop.acs",
	"acsplayer.acs",
	"acscursor.acs",
	"acsinfo.acs",
	"acswidescreen.acs",
	"acshudlib.acs",
]

HEADER = """
/*
MIT License

Copyright (c) 2016-2017 Alexander Korshun and the ACSUtils contributors

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

ACSUtils uses code from ACS-X:	
	
	Copyright Ben Moir 2016
	Distributed under the Boost Software License, Version 1.0.

	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:

	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.
*/

#nocompact

// ZDoom does not allow to use more than 128 map variables in a single library.
// To reduce the amount of map variables ACSUtils use, all simple globals
// have been put into an array.

"""

import sys
import re

def readfile(*args, **kwargs):
	with open(*args, **kwargs) as file:
		return file.read()

class Var:
	pass

def error(string):
	print(string, file=sys.stderr)
	sys.exit(1)

def main():
	vars = {}
	
	DECLARATION = re.compile(r'@(\w+)\s+(\w+)(\s*=\s*([^;]+))?\s*;', re.IGNORECASE) 
	USE = re.compile(r'\$(\w+)', re.IGNORECASE)
	
	for filename in files:
		input = readfile('src/' + filename, 'r', encoding='utf-8')
		
		# find all declarations
		for match in DECLARATION.finditer(input):
			var = Var()
			var.type = match.group(1).lower()
			var.name = match.group(2)
			var.value = match.group(4).strip()
			
			if var.name.lower() in vars:
				error('%s already declared' % var.name)	
			vars[var.name.lower()] = var
	
	# give numbers to all vars
	ints = []
	strs = []
	for var in vars.values():
		if var.type == 'str':
			var.index = len(strs)
			strs.append(var)
		else:
			var.index = len(ints)
			ints.append(var)
	
	# generate output file
	out = open('acsutils.acs', 'w', encoding='utf-8')
	out.write(HEADER)
	for filename in prefixfiles:
		out.write(readfile('src/' + filename, 'r', encoding='utf-8'))
	
	# write integer vars array
	out.write('int ACSUtils_Ints[%d] = {\n' % len(ints))
	for var in ints:
		if var.type != 'str':
			out.write('\t%s, // %s\n' % (var.value, var.name))
	out.write('};\n\n')
	
	# write string vars array
	out.write('str ACSUtils_Strings[%d] = {\n' % len(strs))
	for var in strs:
		if var.type == 'str':
			out.write('\t%s, // %s\n' % (var.value, var.name))
	out.write('};\n\n')
	
	# write ACSUtils code
	for filename in files:
		input = readfile('src/' + filename, 'r', encoding='utf-8')
		
		input = DECLARATION.sub('', input)
				
		def repl(match):
			name = match.group(1)
			var = vars.get(name.lower());
			if not var:
				error('$%s not found' % name);
			
			if var.type == 'str':
				return 'ACSUtils_Strings[%d]' % var.index
			else:
				return 'ACSUtils_Ints[%d]' % var.index

		out.write(USE.sub(repl, input))
		out.write('\n')
	
	out.close()

if __name__ == '__main__':
	main()
